" display
set cc=80
set tw=78
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
set ignorecase
set fileencoding=utf-8
set encoding=utf-8
set nocompatible 
filetype indent plugin on 
set completeopt-=preview
set scrolloff=999
let skip_defaults_vim=1
set statusline=%f\ %=%l/%L\ %c\ %3p%%
set laststatus=2 
set wildmenu

" load plugin function
let g:magnus_plugins='$VIM_PLUGIN_DIR'
exec 'set rtp^='.g:magnus_plugins
func! s:load_plugin(name)
    exec 'set rtp+='.g:magnus_plugins.'/'.a:name
    exec 'runtime! '.a:name.'/plugin/*.vim'
    exec 'runtime! '.a:name.'/after/*.vim'
    exec 'runtime! '.a:name.'/colors/*.vim'
endf

" disctraction [disabled]
call s:load_plugin('distraction')
let g:colors_name='distraction'

" command-t
exec 'runtime! ./command-t/autoload/commandt/mirkwood.vim'
call s:load_plugin('command-t')
let g:CommandTWildIgnore=&wildignore . ",dest,dist,build,
            \.git,
            \venv,*.egg-info,__pycache__,*.pyc,
            \node_modules,
            \cmake-build-debug"
let g:CommandTMinHeight=15
let g:CommandTMaxHeight=15
let g:CommandTInputDebounce=100
let g:CommandTCursorColor='PmenuSel'
let g:CommandTInputDebounce=300

" nerdcommenter
call s:load_plugin('nerdcommenter')

" auto-pairs
call s:load_plugin('auto-pairs')

" youcompleteme
call s:load_plugin('you-complete-me')
let g:ycm_global_ycm_extra_conf='$YCM_GLOBAL_CONF'
let g:ycm_server_python_interpreter='$YCM_PYTHON_EXE'
let g:ycm_show_diagnostics_ui=0
let g:ycm_filetype_whitelist={'*': 1}
let g:ycm_enable_diagnostic_signs=0
let g:ycm_confirm_extra_conf=0
let g:ycm_filetype_blacklist={'txt': 0}

" vim-easymotion
call s:load_plugin('vim-easymotion')
call s:load_plugin('incsearch')
call s:load_plugin('incsearch-easymotion')
map <SPACE> <Plug>(incsearch-easymotion-stay)

" shell operations
map <F2> :!
map <F4> :!<CR>
let &makeprg='./ctl build'
fu! BuildC()
        :make
        :cw
endf
map <F5> :call BuildC()<CR>
map <F7> :cprevious<CR>
map <F8> :cnext<CR>

" content operations
set autowriteall
map <F9> :q<CR>
map <F10> :wa<CR>
map <F12> :wa \| qa<CR>
map <LEADER><LEADER> :call MakeSession()<CR>

" tab operations
map <TAB> :tabn<CR>
map <S-TAB> :tabp<CR>
map <LEADER><TAB> :tabnew<CR>

" move between page
nnoremap <C-f> <C-d><C-d><C-e>
nnoremap <C-b> <C-u><C-u><C-y>
map <silent> <PageDown> <C-d><C-d><C-e>
map <silent> <PageUp> <C-u><C-u><C-y>
